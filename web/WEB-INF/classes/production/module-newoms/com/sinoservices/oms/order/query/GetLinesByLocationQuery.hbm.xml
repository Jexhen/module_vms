<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC 
	"-//Hibernate/Hibernate Mapping DTD 3.0//EN"
	"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">

<hibernate-mapping>
	<sql-query name="GetLinesByLocationQuery">
		<![CDATA[
select
	   EBLN.EBLN_ID,
	   EBLN.EBLN_LINE_CODE,
	   EBLN.EBLN_LINE_NAME,
	   (case cdtl.cdtl_start_type
		 when :locType then to_char(eblc.eblc_name_cn)
		 when :cityType then to_char(ebpl.ebpl_name_cn)
		 when :disType then to_char(ebpl.ebpl_name_cn)
		 when :proType then to_char(ebpl.ebpl_name_cn)
		 when :counType then to_char(ebpl.ebpl_name_cn)
		 when :regType then to_char(ebsa.ebsa_area_name_cn)
		 else ''
		 END
	   ) AS STARTNAME,
	   (case cdtl.cdtl_end_type
		 when :locType then to_char(eblc1.eblc_name_cn)
		 when :cityType then to_char(ebpl1.ebpl_name_cn)
		 when :disType then to_char(ebpl1.ebpl_name_cn)
		 when :proType then to_char(ebpl1.ebpl_name_cn)
		 when :counType then to_char(ebpl1.ebpl_name_cn)
		 when :regType then to_char(ebsa1.ebsa_area_name_cn)
		 else ''
	     END
	   ) AS ENDNAME,
       EBLN.EBLN_ACTUAL_MILEAGE,
       EBLN.EBLN_DRIVING_TIME,
       NVL(EBLN.EBLN_FEES, 0) AS EBLN_FEES,
       CDTL.CDTL_START_TYPE,
       CDTL.CDTL_END_TYPE,
       NVL(CDTL.CDTL_PRIORITY, 999) AS CDTL_PRIORITY,
       CDTL.CDTL_TRANS_TYPE,
       CDTL.CDTL_ESST_CODE,
       CDTL.CDTL_START_EBLC_CODE,
       CDTL.CDTL_START_EBPL_CODE,
       CDTL.CDTL_START_EBRG_CODE,
       CDTL.CDTL_END_EBLC_CODE,
       CDTL.CDTL_END_EBPL_CODE,
       CDTL.CDTL_END_EBRG_CODE,
       CDTL.CDTL_RATED_LONG,
       CDTL.CDTL_RATED_WIDTH,
       CDTL.CDTL_RATED_HEIGHT,
       CDTL.CDTL_TASK_TYPE,
       EBLN.EBLN_EBCU_CODE,
       CDTL.CDTL_CALENDAR_CODE,
       NVL(CDTL.CDTL_HEAVY_MILEAGE, 0) AS CDTL_HEAVY_MILEAGE,
       NVL(CDTL.CDTL_LINEAR_DISTANCE, 0) AS CDTL_LINEAR_DISTANCE,
       NVL(CDTL.CDTL_HEAVY_DRIVE_TIME, 0) AS CDTL_HEAVY_DRIVE_TIME,
       NVL(CDTL.CDTL_MINIMUM_WEIGHT, 0) AS CDTL_MINIMUM_WEIGHT,
       CDTL.CDTL_MAXIMUM_WEIGHT,
       NVL(CDTL.CDTL_MINIMUM_VOLUME, 0) AS CDTL_MINIMUM_VOLUME,
       CDTL.CDTL_MAXIMUM_VOLUME,
       EBLN.EBLN_DEFAULT_VEHICLE_CARD,
       EBLN.EBLN_DEFAULT_DRIVER_NO,
       EBLN.EBLN_DEFAULT_DRIVER_NAME,
       (SELECT TO_CHAR(WM_CONCAT(CDML.CDML_MID_EFFECT))
          FROM CD_TS_MID_LINE CDML
         WHERE CDML.CDML_EBLN_CODE = CDTL.CDTL_EBLN_CODE
        ) AS CDML_MID_EFFECT,
       CDTL.CDTL_LINE_TYPE,
       CDTL.CDTL_TERMINAL_NAME,
       CDTL.CDTL_TERMINAL_CODE,
       CDTL.CDTL_ROUTE_MODEL,
       CDTL.CDTL_MULTIPLE_STOP,
       CDTL.CDTL_MIDWAY_POINT_RESOLUTION
  FROM EB_LINE EBLN
  LEFT JOIN CD_TS_LINE CDTL
    ON EBLN.EBLN_LINE_CODE = CDTL.CDTL_EBLN_CODE
  LEFT JOIN EB_LOCATION EBLC
    ON CDTL.CDTL_START_EBLC_CODE = EBLC.EBLC_CODE
  LEFT JOIN EB_LOCATION EBLC1
    ON CDTL.CDTL_END_EBLC_CODE = EBLC1.EBLC_CODE
  LEFT JOIN EB_PLACE EBPL
    ON EBPL.EBPL_CODE = CDTL.CDTL_START_EBPL_CODE
  LEFT JOIN EB_PLACE EBPL1
    ON EBPL1.EBPL_CODE = CDTL.CDTL_END_EBPL_CODE
  LEFT JOIN EB_SERVICE_AREA EBSA
    ON EBSA.EBSA_AREA_CODE = CDTL.CDTL_START_EBRG_CODE
  LEFT JOIN EB_SERVICE_AREA EBSA1
    ON EBSA1.EBSA_AREA_CODE = CDTL.CDTL_END_EBRG_CODE
where 1=1 
<< AND ebln.ebln_line_code  = :eblnLineCode>>
<< AND ebln.ebln_line_code  in (:eblnLineCodes)>>
<< AND 1=:plCode AND cdtl.cdtl_parent_ebln_code is null>>
<< AND ebln.ebln_status=:eblnStatus >>
<< AND ebln.ebln_status IN (:arrEblnStatus) >>
<<and ebln.EBLN_ESCO_ID=:eblnEscoId>>
and ( :isLeft=:isRigth
<<or (cdtl.cdtl_start_type=:locType and cdtl.CDTL_START_EBLC_CODE=:startLoc)>>
<<or (cdtl.cdtl_start_type=:disType and cdtl.CDTL_START_EBPL_CODE=:startDis)>>
<<or (cdtl.cdtl_start_type=:cityType and cdtl.CDTL_START_EBPL_CODE=:startCity)>>
<<or (cdtl.cdtl_start_type=:proType and cdtl.CDTL_START_EBPL_CODE=:startPro)>>
<<or (cdtl.cdtl_start_type=:counType and cdtl.CDTL_START_EBPL_CODE=:startCoun)>>
<<or (cdtl.cdtl_start_type=:regType and cdtl.CDTL_START_EBRG_CODE in (:startReg))>>
)
and ( :isLeft=:isRigth
<<or (cdtl.cdtl_end_type=:locType and cdtl.CDTL_END_EBLC_CODE=:endLoc)>>
<<or (cdtl.cdtl_end_type=:disType and cdtl.CDTL_END_EBPL_CODE=:endDis)>>
<<or (cdtl.cdtl_end_type=:cityType and cdtl.CDTL_END_EBPL_CODE=:endCity)>>
<<or (cdtl.cdtl_end_type=:proType and cdtl.CDTL_END_EBPL_CODE=:endPro)>>
<<or (cdtl.cdtl_end_type=:counType and cdtl.CDTL_END_EBPL_CODE=:endCoun)>>
<<or (cdtl.cdtl_end_type=:regType and cdtl.CDTL_END_EBRG_CODE in (:endReg))>>
)
<if isGetPossible == 'Y'>
AND ( (1=1
</if>
  << or (cdtl.cdtl_start_type=:locType AND cdtl.CDTL_START_EBLC_CODE  IN ( :startLocCodes) )>>
  << or (cdtl.cdtl_start_type=:disType AND cdtl.CDTL_START_EBPL_CODE  IN ( :startCountyCodes)  )>>
  << or (cdtl.cdtl_start_type=:cityType AND cdtl.CDTL_START_EBPL_CODE  IN ( :startCityCodes)  )>>
  << or (cdtl.cdtl_start_type=:proType AND cdtl.CDTL_START_EBPL_CODE  IN ( :startProvinceCodes)  )>>
  << or (cdtl.cdtl_start_type=:counType AND cdtl.CDTL_START_EBPL_CODE  IN ( :startCountryCodes)  )>>
  << or (cdtl.cdtl_start_type=:regType AND cdtl.CDTL_START_EBRG_CODE  IN ( :startRegionCodes) ) >>

<if isGetPossible == 'Y'>
) AND ( 1=1 
</if>
  << or (cdtl.cdtl_end_type=:locType AND cdtl.CDTL_END_EBLC_CODE  IN ( :endLocCodes) )>>
  << or (cdtl.cdtl_end_type=:disType AND cdtl.CDTL_END_EBPL_CODE  IN ( :endCountyCodes)  )>>
  << or (cdtl.cdtl_end_type=:cityType AND cdtl.CDTL_END_EBPL_CODE  IN ( :endCityCodes)  )>>
  << or (cdtl.cdtl_end_type=:proType AND cdtl.CDTL_END_EBPL_CODE  IN ( :endProvinceCodes)  )>>
  << or (cdtl.cdtl_end_type=:counType AND cdtl.CDTL_END_EBPL_CODE  IN ( :endCountryCodes)  )>>
  << or (cdtl.cdtl_end_type=:regType AND cdtl.CDTL_END_EBRG_CODE  IN ( :endRegionCodes) ) >>
<if isGetPossible == 'Y'>
))
</if>

<< and exists(select 1 from cd_ts_mid_line cdml where cdml.org_id=cdtl.org_id and cdml.cdml_ebln_code=cdtl.cdtl_ebln_code and cdml.cdml_mid_effect=:cdmlMidEffect)>>
<if is_not_empty(orderby1) == true>
  order by ${orderby1}
  <if is_not_empty(orderby2) == true>
  ,${orderby2}
  </if>
  <if is_not_empty(orderby3) == true>
  ,${orderby3}
  </if>
  <if is_not_empty(orderby4) == true>
  ,${orderby4}
  </if>
</if>

		]]>
	</sql-query>
</hibernate-mapping>
